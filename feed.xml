<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Programmer's Note</title>
    <description>A programmers note</description>
    <link>https://ragiragi.github.io//</link>
    <atom:link href="https://ragiragi.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 Nov 2019 12:12:46 +0000</pubDate>
    <lastBuildDate>Sat, 23 Nov 2019 12:12:46 +0000</lastBuildDate>
    <generator>Jekyll v3.6.3</generator>

    
      <item>
        <title>Elixir, Unicode and IOList</title>
        <description>&lt;style&gt;
body { font-size: 14px; line-height: 24px; }
code { font-size: 12px; line-height: 20px; }
&lt;/style&gt;

&lt;p&gt;&lt;em&gt;간단한 코딩 테스트들을 하다 보면 문자열을 낱글자로 나눠 처리해야 하는 경우를 쉽게 만날 수 있는데, 이 경우 Elixir에서 사용할 수 있는 함수로 &lt;code class=&quot;highlighter-rouge&quot;&gt;String.codepoints/1&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;String.graphemes/1&lt;/code&gt;가 두가지가 있다. 사실 Unicode에 대한 배경 지식이 없다면 &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#module-code-points-and-grapheme-cluster&quot;&gt;공식 문서의 설명&lt;/a&gt;만으로는 두 함수의 차이가 쉽게 와닿지 않은데, Elixir Unicode 처리에 대한 이해 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;iolist()&lt;/code&gt; 타입까지 Elixir String에 대해 다룬 발표가 있어 요약해본다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;영상 (37분) : &lt;a href=&quot;https://youtu.be/zZxBL-lV9uA&quot;&gt;ElixirConf 2016 - String Theory by Nathan Long &amp;amp; James Edward Gray II&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;elixir의-문자열-타입들&quot;&gt;Elixir의 문자열 타입들&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Charlist : unicode codepoints 값을 담고 있는 integer list. 보통 erlang 모듈 호환을 위해 사용.&lt;/li&gt;
  &lt;li&gt;Atom : 정체는 name들을 담고 있는 테이블. 단순히 같은 포인터인지 체크하면 되니 equality 체크가 빠름. GC 되지 않기 때문에 사용자 입력값을 atom으로 변경하고자 할 때는 주의가 필요. 이 경우엔 &lt;code class=&quot;highlighter-rouge&quot;&gt;String.to_existing_atom/1&lt;/code&gt;을 사용하는 게 좋다.&lt;/li&gt;
  &lt;li&gt;String
    &lt;ul&gt;
      &lt;li&gt;bitstrings : 연속된 bit(0, 1)들. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;..&amp;gt;&amp;gt;&lt;/code&gt; 리터럴로 표현&lt;/li&gt;
      &lt;li&gt;binaries : 연속된 byte(8bit)들&lt;/li&gt;
      &lt;li&gt;Strings : UTF-8으로 인코딩 된 codepoints를 내용으로 하는 binaries&lt;/li&gt;
      &lt;li&gt;즉, string ⊆ binary ⊆ bitstring&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iolist?
    &lt;ul&gt;
      &lt;li&gt;공식 문서상의 타입 스펙은 &lt;code class=&quot;highlighter-rouge&quot;&gt;maybe_improper_list(byte() | binary() | iolist(), binary() | [])&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;IO를 위해서 문자열 concatanation 연산은 자주 일어날 수 밖에 없는데, 이럴 때 마다 메모리 복사가 발생
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex&amp;gt; IO.puts(&quot;James&quot; &amp;lt;&amp;gt; &quot; and &quot; &amp;lt;&amp;gt; &quot;Nathan&quot;)
# 메모리에 &quot;James&quot;, &quot; and &quot;, &quot;Nathan&quot;, &quot;James and &quot;, &quot;James and Nathan&quot;이 모두 생성.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;이를 대신해 concat 없이 binary가 담긴 list를 주면 차례대로 메모리 복사 없이 iterate 하면서 사용됨. 이게 &lt;code class=&quot;highlighter-rouge&quot;&gt;iolist()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;improper list? : 일반적으로 list 구조는 &lt;code class=&quot;highlighter-rouge&quot;&gt;[any() | list()]&lt;/code&gt; 이지만, list 뒤에 새로운 값을 추가하는 appending 작업 효율을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;[[&quot;James&quot; | &quot; and &quot;] | &quot;Nathan&quot;]&lt;/code&gt;와 같은 중첩 구조도 지원.&lt;/li&gt;
      &lt;li&gt;담을 수 있는 내용에 따라 세부적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;iolist&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;iodata&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;chardata&lt;/code&gt; 등으로 구분.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;elixir와-unicode&quot;&gt;Elixir와 Unicode&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Unicode : 기호와 기호별 숫자 값(codepoint)의 거대한 맵핑 테이블. UTF-8은 이 codepoint를 8-bit(byte)로 표현한 것. 물론 단일 byte로는 Unicode를 모두 커버할 수 없다 보니 바이트 두 개짜리, 세 개짜리, 네 개짜리 템플릿이 존재한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0xxxxxxx
110xxxxx 10xxxxxx
1110xxxx 10xxxxxx 10xxxxxx
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx

# &quot;x&quot; 부분을 이용해 codepoint를 나타냄.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Elixir의 문자열은 UTF-8 인코딩 된 바이너리이므로 실제 저장되는 내용을 보면
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex&amp;gt; i &quot;⏰&quot;
...
Raw representation
  &amp;lt;&amp;lt;226, 143, 176&amp;gt;&amp;gt;
iex&amp;gt; [226, 143, 176] |&amp;gt; Enum.map(base_2)
[&quot;11100010&quot;, &quot;10001111&quot;, &quot;10110000&quot;]
# 11100010 10001111 10110000
# 1110xxxx 10xxxxxx 10xxxxxx
# 템플릿 제외한 &quot;x&quot; 부분만 모아보면
# 0010001111110000 (10진수로는 9200)
iex&amp;gt; String.to_integer(&quot;0010001111110000&quot;, 2) == ?⏰
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;즉 여러 개의 byte가 하나의 codepoint를 구성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여기에 더해 여러 개의 codepoint가 모여 하나의 grapheme(자소)을 구성할 수도 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;e + ̈ = ë&lt;/code&gt;. 이모지 skin tone modifier 조합도 이와 같은 방식을 사용. (여러 codepoint를 조합하여 하나의 codepoint로 표현(compose, nfc), 그 반대로 해체하는 과정을(decompose, nfd) unicode normalization이라고 부른다.)
    &lt;ul&gt;
      &lt;li&gt;즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;codepoints/1&lt;/code&gt;은 이 개별 codepoint 글자들을 반환하는 함수이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;graphemes/1&lt;/code&gt;은 grapheme cluster 단위로 글자들을 반환한다.
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex&amp;gt; IO.inspect({&quot;e\u0308&quot;, &quot;\u00EB&quot;})
{&quot;ë&quot;, &quot;ë&quot;} # 같은 표현을 갖는 개별 codepoint도 존재
iex&amp;gt; &quot;e\u0308&quot; == &quot;\u00EB&quot;
false
iex&amp;gt; noel = &quot;noe\u0308l&quot;
&quot;noël&quot;
iex&amp;gt; String.codepoints(noel)
[&quot;n&quot;, &quot;o&quot;, &quot;e&quot;, &quot;̈&quot;, &quot;l&quot;]
iex&amp;gt; String.codepoints(noel) |&amp;gt; Enum.reverse() |&amp;gt; Enum.join()
&quot;l̈eon&quot;
iex&amp;gt; String.graphemes(noel)
[&quot;n&quot;, &quot;o&quot;, &quot;ë&quot;, &quot;l&quot;]
iex&amp;gt; String.graphemes(noel) |&amp;gt; Enum.reverse() |&amp;gt; Enum.join()
&quot;lëon&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;여러 bytes가 하나의 codepoint를 나타내고, 여러 codepoints가 하나의 grapheme을 나타내고, 중간에 word joiner와 같은 character도 들어갈 수 있고… 상황이 이렇다 보니 문자열을 다루는 구현이 간단하진 않다.
    &lt;ul&gt;
      &lt;li&gt;길이를 구한다면? 문자열을 뒤집는다면? 문자열 동등성 비교를 한다면? 문자열 일부를 잘라낸다면? 엑센트가 들어간 글자를 downcase 해야한다면?&lt;/li&gt;
      &lt;li&gt;다행히 elixir의 String 모듈에 있는 함수들은(&lt;code class=&quot;highlighter-rouge&quot;&gt;length/1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reverse/1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;equivalent?/1&lt;/code&gt;등) 이러한 이슈들을 꽤 잘 처리해주고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;다시-iolist&quot;&gt;다시 iolist()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;BEAM VM에서 데이터는 불변이고 프로세스는 개별 heap을 갖고 있다. 즉 메시지가 전달될 때 마다 메모리 복사가 이루어진다. BEAM에서는 이런 점을 개선하기 위해 64bytes 이상의 바이너리는 공용 heap에 저장하고 프로세스간 공유한다. (reference counted binaries)
    &lt;ul&gt;
      &lt;li&gt;장점이라면 큰 바이너리를 프로세스간에 전달할 때 매우 가볍고(참조값만 전달), 재사용성이 높아진다.&lt;/li&gt;
      &lt;li&gt;단점이라면 long-running process에서 참조가 유지되는 경우 GC 되지 않는다. 즉 메모리 릭의 위험성을 가지고 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iolist를 이용하면 프로세스 내 작은 문자열도 재사용될 수 있다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[start_li, end_li] = [&quot;&amp;lt;li&amp;gt;&quot;, &quot;&amp;lt;/li&amp;gt;&quot;]
[%{name: &quot;Joe&quot;}, %{name: &quot;Amy&quot;}]
|&amp;gt; Enum.map(fn u -&amp;gt; [start_li, u.name, end_li] end)
|&amp;gt; IO.puts()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;내부적으로 iolist는 &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt;가 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;writev&lt;/code&gt; 시스템 콜이 사용될 수 있기 때문에 – 문자열 메모리 주소들만 전달 – 성능상 잇점을 얻을 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;web-responses-phoenix-templates&quot;&gt;Web Responses, Phoenix Templates&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;이런 특징을 잘 이용하는게 바로 phoenix의 template인데, EEx 파일을 함수로 컴파일하고(iolist 덩어리), 이 함수는 주어진 인자값을 끼워넣어 최종 iolist를 반환. 이를 통해 템플릿 iolist에서 공통으로 사용되는 HTML 조각들은 메모리내에 재사용되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;writev&lt;/code&gt;를 통해 직접 참조됨. 🚀&lt;/li&gt;
  &lt;li&gt;caching을 위해 별다른 노력을 하지 않아도 자연스럽게 정적인 부분은 cache 되고, 동적인 부분은 cache 안되고, 템플릿 변경되면 함수 재컴파일을 통해 cache invalidate 처리된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;위 발표 내용은 발표자 Nathan의 블로그에 보다 더 자세한 설명을 곁들여 네 편의 글로 나뉘어 게시되있다. &lt;a href=&quot;http://nathanmlong.com/blog/&quot;&gt;http://nathanmlong.com/blog/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://ragiragi.github.io//2019/11/23/elixir-unicode-iolist/</link>
        <guid isPermaLink="true">https://ragiragi.github.io//2019/11/23/elixir-unicode-iolist/</guid>
      </item>
    
      <item>
        <title>José Trivia</title>
        <description>&lt;p&gt;&lt;em&gt;&amp;lt;Image from &lt;a href=&quot;https://www.welcometothejungle.com/en/articles/btc-elixir-jose-valim&quot;&gt;welcometothejungle.com&lt;/a&gt;&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Elixir를 만든 José Valim과 관련한 몇가지 이야기들&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;브라질리언. ‘조제’라고 읽는다. 그의 회사인 Plataformatec 역시 브라질 회사.&lt;/li&gt;
  &lt;li&gt;CS 전공 아님&lt;/li&gt;
  &lt;li&gt;Elixir이전에 Rails 코어팀 멤버였고 그만둔지 오래되었지만 &lt;a href=&quot;https://github.com/rails/rails/graphs/contributors&quot;&gt;아직 Rails 컨트리뷰션 순위 7위&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://rubyheroes.com/heroes/2010&quot;&gt;2010년 Ruby Hero&lt;/a&gt;에 뽑히기도&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rails 성능 개선, 특히 멀티쓰레드 부분을 파고 있던 찰라에 터널증후군으로 오래동안 코딩을 쉬어야 했고 코딩을 못하게 된 그는 동시성 관련 페이퍼들을 읽다가 Erlang에 빠져들게 되었다.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;“The story begins with a keyboard, a rebellious wrist, and a restless mind. You see, José was one of the most helpless creatures in all of nature: a programmer with a wrist injury.” – &lt;a href=&quot;https://pragprog.com/book/tvmelixir/adopting-elixir&quot;&gt;Adopting Elixir&lt;/a&gt;&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.welcometothejungle.com/en/articles/btc-elixir-jose-valim&quot;&gt;Ruby/Rails 경험을 통해 오픈소스/프로그래밍 언어 역시 마케팅이 중요하다는 걸 알고 있다.&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;발표, 글 뿐만 아니라 Phoenix, Ecto 같은 많은 대표 프로젝트들에 관여하고 있고 커뮤니티에도 자주 등장한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.twitch.tv/collections/YDM6eKu6bhV1Nw&quot;&gt;2018년 Advent of Code를 라이브 코딩&lt;/a&gt;한 적이 있다.
    &lt;ul&gt;
      &lt;li&gt;에디터는 Sublime Text를 쓴다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://ragiragi.github.io//2019/11/17/jose-trivia/</link>
        <guid isPermaLink="true">https://ragiragi.github.io//2019/11/17/jose-trivia/</guid>
      </item>
    
      <item>
        <title>엘릭서 도입하기</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://pragprog.com/book/tvmelixir/adopting-elixir&quot;&gt;&lt;strong&gt;Adopting Elixir&lt;/strong&gt; - &lt;em&gt;From Concept to Production&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;보통 특정 프로그래밍 언어를 주제로 하는 책들이라면 문법, 타입, 내장
라이브러리 혹은 프레임워크를 다루는 것들이 일반적이지만 이 책은 조금
궤를 달리한다. 다른 책들이 잘 다루지 않는 배포, 프로파일링, 코드 품질
관리, 레거시 시스템 전환, 로깅, 에러 트레이싱 등과 같이 Elixir
프로그래밍 언어로 만든 제품을 실제 프로덕션 환경에 올릴 때 맞닥뜨리게
되는 문제를 이야기한다.&lt;/p&gt;

&lt;p&gt;이런 부분들은 노하우의 영역이라 신생 언어의 경우 자료가 많지 않고 대게
책 바깥, 커뮤니티나 컨퍼런스 아니면 검색을 통해 산발적으로 정보를 얻을
수밖에 없는데, 책 한 권으로 — 물론 다양한 것들 다루다 보니 대부분 소개
수준에 그칠 수 밖에 없다 — 검증된 노하우들을 접할 수 있어 많은 도움이
되었다. 내 불안감을 더는데 도움이 되었다는 게 더 정확한
표현일지도. 😅&lt;/p&gt;

&lt;p&gt;사실 이 책에서 가장 흥미로웠던 부분은 기술적인 부분이 아닌, Elixir라는
새로운 프로그래밍 언어를 도입할 때 겪게 되는 정치, 사회적인
이야기들이었다. 블리처리포트가 기존 기술 스택에서 어려움을 겪던 중
이를 극복하기 위해 Elixir를 도입하게 된 사례, Bruce A. Tate가 창업한
Elixir 기반 회사가 엑싯하는 과정에서의 사례(책도 많이 팔고 엑싯도
하고…) 등 회사 이해관계자들에게 신기술을 소개하고 설득하고 도입을
결정하고 팀을 키우고… 신생 기술 도입을 둘러싼 여러 가지 문제들에 대한
현실적인 조언들을 해주고 있다.&lt;/p&gt;

&lt;p&gt;Elixir 도입을 앞두고 있거나 관심은 있지만 주저하고 있는 사람에겐
이만한 책은 없을 것 같다. 그리고 꼭 Elixir가 아니라도 조직에 새로운
기술 요소를 도입해보고자 하는 사람에게도 일부 도움이 될 수 있을 것
같다. 🧪&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://ragiragi.github.io//2019/11/07/adopting-elixir/</link>
        <guid isPermaLink="true">https://ragiragi.github.io//2019/11/07/adopting-elixir/</guid>
      </item>
    
      <item>
        <title>Anonymous Function and the Dot</title>
        <description>&lt;p&gt;elixir를 처음 접할 때 가장 🤔스러웠던 부분은 익명 함수(anonymous
function) 호출 부분이었다. 익명함수를 호출하기 위해서는
&lt;code class=&quot;highlighter-rouge&quot;&gt;func_name.(args)&lt;/code&gt;와 같은 문법을 써야하는데&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Function&amp;lt;6.128620087/1 in :erl_eval.expr/5&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# X&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CompileError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;iex:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# O&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반면 기명 함수(named function)는 일반적인 방법으로 호출 가능하다.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;defmodule Greeter, do: (def say(s), do: IO.puts(s))&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;이런 특징을 보이는 이유는 &lt;a href=&quot;https://elixirforum.com/t/anonymous-functions-the-dot-and-parameters/10886/7&quot;&gt;언어 설계 때문&lt;/a&gt;이라 한다. Elixir는
lisp-2 스타일 언어로서, 함수(named function)와 변수(variables)가 각기
다른 namespace를 사용하기 때문에 일반 함수 호출 문법으로는 변수에
바인드 된 함수를 찾을 수가 없는 것. (반대로 lisp-1 계열 언어들은
함수와 변수가 같은 namespace를 사용한다.) 결국 별도의 함수 호출 문법이
필요했고 그게 바로 “.” 호출이라 한다. 물론 ‘1차로 함수 영역에서 찾고
없으면 2차로 변수 영역에 정의된 함수를 찾아주면 좋지 않을까?’라는 단순
무식한 생각도 들지만 분명 그로 인한 부작용도 있을 터이고 이는 언어
&lt;del&gt;취향&lt;/del&gt; 설계의 영역이니 그냥 따르기로…&lt;/p&gt;

&lt;h5 id=&quot;footnote&quot;&gt;Footnote&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;다른 lisp-2 스타일로는 Common Lisp, Ruby, Perl, Erlang 이 있다고
한다.&lt;/li&gt;
  &lt;li&gt;쉽게 설명해보려다가 실패한듯한 &lt;a href=&quot;https://stackoverflow.com/a/18023790/1105414&quot;&gt;José의 글&lt;/a&gt;도 참고해볼 만하다.&lt;/li&gt;
  &lt;li&gt;Joe Armstrong(Erlang 창시자)이 일찍이 오래전 &lt;a href=&quot;https://joearms.github.io/published/2013-05-31-a-week-with-elixir.html&quot;&gt;elixir 리뷰&lt;/a&gt; 글에서
“이거 지금 안고치면 나처럼 20년동안 사람들에게 설명하느라 시간
허비하고 머리가 하얗게 세버릴 껄?”라고 충고 했었다. 🤣&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://ragiragi.github.io//2019/11/01/anonymous-function-and-the-dot/</link>
        <guid isPermaLink="true">https://ragiragi.github.io//2019/11/01/anonymous-function-and-the-dot/</guid>
      </item>
    

    
      
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>